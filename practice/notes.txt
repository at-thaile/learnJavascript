Số cơ số 8 không được phép dùng số 0xxx trong javascript vì không khuyến khích lập trình
viên chèn số 0 vào trong script, do đó ta phải parseInt rõ ràng nó:
 var y = parseInt('0712',8);
 console.log(y);
 Trong bản mới của ECMA 2015, số cơ số 8 khai báo theo sau 0o hoặc 0O: ví dụ 0o711;
 var x = 0o711;
 
 Code hoàn chỉnh:
 (function(){
  "use strict";
 	var x = 0b11001;
  var y = parseInt('010',8);
  console.log(x);
  console.log(y);
  var z = 0o71;
  console.log(z);-c
}
)();
 Nên khai báo ()
___________________________________________________________
                            Grammar and types

1.Basic
 -Js phân biệt hoa thường: var Short # var short,
 -Spaces,Tab,Newline character được gọi là kí tự khoảng trắng - whitespaces

2.comment

3.Declartions: khai báo
  var: khai báo biến, không cần khởi tạo giá trị
  let: Khai báo blocked-scope ,local variable : biến cục bộ
  const: khai báo blocked-scopes, Không chỉnh sửa được
  a.Variable
    Tên của biến, gọi là identifier tuân theo nguyên tắc sau.
    Biến phải bắt đầu bằng letter,$ hoặc _,phân biệt hoa thường
  b.Khai báo Biến
    var x = 5, let y = 6
    var có thể được dùng để khai báo global và local variable, nếu biến được đặt bên ngoài hàm thì gọi là biến toàn cục
    let dùng để khai báo biến local
  c.Evaluating variable.
  -undefined: biến được khai báo mà không gán giá trị thì sẽ có giá trị là undefined
    ex: var a;
        if(a== undefined) alert("a is undefined");
  -Giá trị undefined được xem là false tronng boolean context(ngữ cảnh logic)
    ex: var a; if(!a) alert("a is false");
  -Giá trị undefined được xem là NaN trong numeric context (ngữ cảnh số)

  -Khi một var có giá trị null thì nó được xem là 0 trong numeric context và false trong boolean context.

  d.Variable scope (phạm vi biến)
  -Biến được khai báo với từ khóa var thì có phạm vi toàn cục-global context
  -Biến được khai báo với từ khóa let,const thì có phạm vi local
  ex: if(true){ var x = 5}; console.log(x); // in ra 5
      if(true){ let y = 3}; console.log(y); // Reference error vì biến y có phạm vi local

  e.variable hoisting: nâng phạm vi biến
  -Với biến var, nếu ta sử dụng biến trước khi khai báo thì ko có lỗi gì, biến đó mặc định có giá trị undefined
  -Với biến khai báo let thì sẽ có lỗi nếu ta dùng biến trước khi khai báo
  ex: console.log(x); var x= 3; // in ra undefined
      console.log(y); let y = 4;// Reference error

  f. Function hoisting
   ex: foo(); function foo(){ console.log("xxx");} // in ra xxx

  g. Global variable
    global variable là fact propreties(thuộc tính) của global object(đối tượng toàn cục)
    Trong một trang web, đối tượng toàn cục là window, do đó ta có thể set và get biến tòa cục bằng cách sử dụng
    window.var_name.
    do đó , ta có thể truy cập biến toàn cục từ một window hoặc frame của window khác bằng cách gọi name của window hoặc frame.
  
  h.Constants
    -ta có thể tạo hằng số với từ khóa const. Cú pháp của constant identifier 
    giống nư var identifier, nên viết hoa, nên dài thì dùng _ để phân chia
    ví dụ : const CLASS_NAME = "10A1";
    -Một khi đã khai báo hằng thì không thể gán lại giá trị hay khai báo lại 
    -Phạm vi của constant giống như let trong khai báo biến.
    -Ta không thể khai báo constant cùng tên với tên hàm hoặc tên biến trong cùng phạm vi- scope
    ex: fucntion f(){}; const f=5; 
        function f(){const g = 5; var g }; //error

    -Tuy nhiên , propreties of objects gán cho constant không được protected.
     do đó , statement có thể được thực thi mà ko có vấn đề gì
     ex: const MY_OBJECT = {'quantity': '5'};
         MY_OBJECT.quantity = '6'; //OK

4. Data structures and types(Kiểu dữ liệu và cấu trúc dữ liệu)
  
  a.Data types
    trong bản mới nhất của ECMAScript định nghĩa 7 kiểu dữ liệu cơ bản

